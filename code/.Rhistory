ht_seq <- c(ht_seq,ht1)
sigma_t <- sqrt(ht1)
}
plot(sqrt(ht_seq), type = "l")
rm(list = ls())
rm(list = ls())
library(forecast)
# AR(2)
n = 1500
e <- rnorm(n)
set.seed(62)
y_t <- arima.sim(list(ar=c(0.5, .45)), n = n, innov = e )
y_t
y = window(y_t , end = 1499)
model1 = arima(y ,order = c(2,0,0) , include.mean = F)
pred = forecast(model1,h = 1)$mean
rm(list = ls())
library(tsDyn)
# AR(2)
n = 1500
e <- rnorm(n)
set.seed(62)
library(fGarch)
rm(list = ls())
seed <- 17
# set the number simulated returns
n <- 10^2
# set the model parameters
con <- 0
w <- 0.1
a <- 0.2
b <- 0.5
par_0 <- c(con,w,a,b)
sigma_t <- sqrt(w/(1-a-b)) # start with initial volatility
ht_seq <- numeric()
R_seq <- numeric()
set.seed(seed)
for(i in 1:n) {
R_t1 <- rnorm(1,con,sigma_t)
R_seq <- c(R_seq,R_t1)
ht1 <- w + a*(R_t1^2) + b*sigma_t^2
ht_seq <- c(ht_seq,ht1)
sigma_t <- sqrt(ht1)
}
plot(sqrt(ht_seq), type = "l")
sim_garch_f <- function(n) {
set.seed(seed)
sigma_t <- sqrt(w/(1-a-b))
ht_seq <- numeric()
R_seq <- numeric()
for(i in 1:n) {
R_t1 <- rnorm(1,con,sigma_t)
R_seq <- c(R_seq,R_t1)
ht1 <- w + a*(R_t1^2) + b*sigma_t^2
ht_seq <- c(ht_seq,ht1)
sigma_t <- sqrt(ht1)
}
return(R_seq)
}
n_seq <- 10^(2:4)
R_list <- lapply(n_seq, sim_garch_f)
garch_list <- lapply(R_list, function(R) garchFit(formula = ~ garch(1,1), data = R,trace = F))
coef_hat <- sapply(garch_list, function(g) g@fit$matcoef[,1])
colnames(coef_hat) <- paste("n",n_seq,sep = "_")
data.frame(coef_hat)
sim_garch_f <- function(n) {
set.seed(seed)
sigma_t <- sqrt(w/(1-a-b))
ht_seq <- numeric()
R_seq <- numeric()
for(i in 1:n) {
R_t1 <- rnorm(1,con,sigma_t)
R_seq <- c(R_seq,R_t1)
ht1 <- w + a*(R_t1^2) + b*sigma_t^2
ht_seq <- c(ht_seq,ht1)
sigma_t <- sqrt(ht1)
}
return(R_seq)
}
n_seq <- 10^(2:4)
R_list <- lapply(n_seq, sim_garch_f)
garch_list <- lapply(R_list, function(R) garchFit(formula = ~ garch(1,1), data = R,trace = F))
coef_hat <- sapply(garch_list, function(g) g@fit$matcoef[,1])
colnames(coef_hat) <- paste("n",n_seq,sep = "_")
data.frame(coef_hat)
garch_list
sim_garch_f <- function(n) {
set.seed(seed)
sigma_t <- sqrt(w/(1-a-b))
ht_seq <- numeric()
R_seq <- numeric()
for(i in 1:n) {
R_t1 <- rnorm(1,con,sigma_t)
R_seq <- c(R_seq,R_t1)
ht1 <- w + a*(R_t1^2) + b*sigma_t^2
ht_seq <- c(ht_seq,ht1)
sigma_t <- sqrt(ht1)
}
return(R_seq)
}
n_seq <- 10^(2:4)
R_list <- lapply(n_seq, sim_garch_f)
garch_list <- lapply(R_list, function(R) garchFit(formula = ~ garch(1,1), data = R,trace = F))
garch_list
library(tsDyn)
library(tsDyn)
##Simulation of a TAR with 1 threshold
TvarMat <- c(2.9,-0.4,-0.1,-1.5, 0.2,0.3)
sim<-setar.sim(B=TvarMat,lag=2, type="simul", nthresh=1, Thresh=2, starting=c(2.8,2.2))$serie
sim
##Simulation of a TAR with 1 threshold
TvarMat <- c(2.9,-0.4,-0.1,-1.5, 0.2,0.3)
sim <- setar.sim( B=TvarMat,lag=2, type="simul",
nthresh=1, Thresh=2,
starting=c(2.8,2.2))$serie
mean(ifelse(sim>2,1,0)) #approximation of values over the threshold
#check the result
selectSETAR(sim, m=2)
sim_garch_f <- function(n) {
set.seed(seed)
sigma_t <- sqrt(w/(1-a-b))
ht_seq <- numeric()
R_seq <- numeric()
for(i in 1:n) {
R_t1 <- rnorm(1,con,sigma_t)
R_seq <- c(R_seq,R_t1)
ht1 <- w + a*(R_t1^2) + b*sigma_t^2
ht_seq <- c(ht_seq,ht1)
sigma_t <- sqrt(ht1)
}
return(R_seq)
}
n_seq <- 10^(2:4)
n_seq
R_list <- lapply(n_seq, sim_garch_f)
R_list
library(tsDyn)
flu.tar4.05=setar(dflu, m=4, thDelay=0, th=.05) #dflu=diff(flu,1) as given in the text
selectLSTAR
data(m.unrate)
setar(diff(m.unrate), ML=c(2,3,4,12), MH=c(2,4,12), th=0.1, include="none")
m.unrate
plot( m.unrate)
plot( diff(m.unrate))
setar(diff(m.unrate), ML=c(2,3,4,12), MH=c(2,4,12), th=0.1, include="none")
setar(diff(m.unrate), ML=c(2,3), MH=c(4,12), th=0.1, include="none")
mod.setar <- setar(log10(lynx), m=2, thDelay=1, th=3.25)
mod.setar <- setar(log10(lynx), m=2, thDelay=1, th=3.25)
mod.setar
mod.setar <- setar(log10(lynx), m=2, thDelay=1, th=3.25)
mod.setar
mod.setar <- setar(log(lynx), m=2, thDelay=1, th=3.25)
mod.setar <- setar(log10(lynx), m=2, thDelay=1, th=3.25)
mod.setar
mod.setar
log10(lynx)
plot( log10(lynx))
tar_ser = log10(lynx)
tar_ser = log10(lynx)
mod.setar <- setar(tar_ser, m=2, thDelay=1, th=3.25)
mod.setar
tar_ser = log10(lynx)
mod.setar <- setar(tar_ser, m=2, thDelay=1, th=3.25)
mod.setar <- setar(tar_ser, m=2, thDelay=1, th=3.25)
mod.setar
tar_ser = log10(lynx)
plot(tar_ser)
lines(h = 0)
hline(h = 0)
lines(h = 0)
min(tar_ser)
tar_ser = log(lynx)
tar_ser
mod.setar
plot(tar_ser)
tar_ser = log(lynx)
mod.setar <- setar(tar_ser, m=2, thDelay=1, th=3.25)
mod.setar
plot(tar_ser)
min(tar_ser)
library(ggplot2)
library(tidyverse)
economics$uempmed
a =economics$uempmed
plot(a)
plot(a , lty = 'l')
plot(a , type = 'l')
economics
a = economics['date','uempmed']
a = economics[,c('date','uempmed')]
a
a = ts(economics['uempmed')]
a = ts(economics['uempmed'])
a
?economics
library(readxl)
setwd("~/GitHub/Bach-diploma/code")
unemp = read_xlsx('UNRATE.119153930.xlsx')
unemp
unemp = read_xlsx('UNRATE.119153930.xlsx')$UNRATE
unemp
unemp = ts(read_xlsx('UNRATE.119153930.xlsx')$UNRATE,start = c(1960,01),freq = 12)
unemp
unemp = ts(read_xlsx('UNRATE.119153930.xlsx')$UNRATE,
start = c(1960,01), freq = 12)
unemp
plot(unemp , type = 'l')
auto.arima(unemp)
a = auto.arima(unemp)
plot(a$fitted)
a$fitted
plot(a$fitted)
plot(a)
tar_ser = log(lynx)
tar_ser
mod.setar <- setar(tar_ser, m=2, thDelay=1, th=3.25)
tar_ser = log10(lynx)
mod.setar <- setar(tar_ser, m=2, thDelay=1, th=3.25)
mod.setar
plot(tar_ser)
data(m.unrate)
setar(diff(m.unrate), ML=c(2,3,4,12), MH=c(2,4,12), th=0.1, include="none")
setar(diff(m.unrate), ML=c(2,3,4,12), MH=c(2,4,12), th=0.1, include="none")
arima(diff(m.unrate))
auto.arima(diff(m.unrate))
data(m.unrate)
setar(diff(m.unrate), ML=c(2,3,4,12), MH=c(2,4,12), th=0.1, include="none")
ser_tar = diff(m.unrate)
setar(ser_tar, ML=c(2,3,4,12), MH=c(2,4,12), th=0.1, include="none")
model = setar(ser_tar, ML=c(2,3,4,12), MH=c(2,4,12), th=0.1, include="none")
plot(ser_tar)
model = auto.arima(ser_tar)
(model = auto.arima(ser_tar))
train = window(ser_tar,length(ser_tar)-1)
train
train = ser_tar[-nrow(ser_tar)]
train
train = ser_tar[-nrow(ser_tar),]
ser_tar
ser_tar[-nrow(ser_tar)]
-nrow(ser_tar)
train = ser_tar[-length(ser_tar)]
train
ser_tar
train = ser_tar[-length(ser_tar)]
test = ser_tar[length(ser_tar)]
test
tail(train)
train = ser_tar[-length(ser_tar)]
train
test
(model = auto.arima(ser_tar))
(model = auto.arima(ser_tar))
nsim = 1000
y_bag = rep(NA, nsim)
n = length(train)+ 1
nsim = 1000
y_bag = rep(NA, nsim)
block_length <- n/3
(model = auto.arima(train))
bagging = function(series){
model = auto.arima( series )
coef(model)
}
bagging = function(series){
model = auto.arima( series )
y = forecast(model, h = 1)
}
bagging = function(series){
model = auto.arima( series )
y = forecast(model, h = 1)
return(y)
}
for(i in 1:nsim){
bag <- tsboot(train, bagging,R = n,l = block_length, sim = "fixed")
b_bag[i,] = colMeans(bag$t)
}
library(boot)
for(i in 1:nsim){
bag <- tsboot(train, bagging,R = n,l = block_length, sim = "fixed")
b_bag[i,] = colMeans(bag$t)
}
bagging = function(series){
model = auto.arima( series )
y = forecast(model, h = 1)
return(y)
}
for(i in 1:nsim){
bag <- tsboot(train, bagging,R = n,l = block_length, sim = "fixed")
b_bag[i,] = colMeans(bag$t)
}
bagging(train)
a = bagging(train)
a$mean
for(i in 1:nsim){
bag <- tsboot(train, bagging,R = n,l = block_length, sim = "fixed")
y[i] = bag$mean
}
(model = auto.arima(train))
n = length(train)+ 1
nsim = 1000
y_bag = rep(NA, nsim)
block_length <- n/3
library(boot)
bagging = function(series){
model = auto.arima( series )
y = forecast(model, h = 1)$mean
return(y)
}
sim_garch_f <- function(n) {
set.seed(seed)
sigma_t <- sqrt(w/(1-a-b))
ht_seq <- numeric()
R_seq <- numeric()
for(i in 1:n) {
R_t1 <- rnorm(1,con,sigma_t)
R_seq <- c(R_seq,R_t1)
ht1 <- w + a*(R_t1^2) + b*sigma_t^2
ht_seq <- c(ht_seq,ht1)
sigma_t <- sqrt(ht1)
}
return(R_seq)
}
n_seq <- 10^(2:4)
R_list <- lapply(n_seq, sim_garch_f)
garch_list <- lapply(R_list, function(R) garchFit(formula = ~ garch(1,1),
data = R,trace = F))
coef_hat <- sapply(garch_list, function(g) g@fit$matcoef[,1])
colnames(coef_hat) <- paste("n",n_seq,sep = "_")
data.frame(coef_hat)
garch_list
library(tsDyn)
##Simulation of a TAR with 1 threshold
TvarMat <- c(2.9,-0.4,-0.1,-1.5, 0.2,0.3)
sim <- setar.sim( B=TvarMat,lag=2, type="simul",
nthresh=1, Thresh=2,
starting=c(2.8,2.2))$serie
mean(ifelse(sim>2,1,0)) #approximation of values over the threshold
#check the result
selectSETAR(sim, m=2)
# TAR ---------------------------------------------------------------------
data(m.unrate)
ser_tar = diff(m.unrate)
train = ser_tar[-length(ser_tar)]
test = ser_tar[length(ser_tar)]
rm(list = ls())
library(tsDyn)
rm(list = ls())
library(boot)
library(tsDyn)
#
# sim_garch_f <- function(n) {
#   set.seed(seed)
#   sigma_t <- sqrt(w/(1-a-b))
#   ht_seq <- numeric()
#   R_seq <- numeric()
#   for(i in 1:n) {
#     R_t1 <- rnorm(1,con,sigma_t)
#     R_seq <- c(R_seq,R_t1)
#     ht1 <- w + a*(R_t1^2) + b*sigma_t^2
#     ht_seq <- c(ht_seq,ht1)
#     sigma_t <- sqrt(ht1)
#   }
#
#   return(R_seq)
# }
#
# n_seq <- 10^(2:4)
# R_list <- lapply(n_seq, sim_garch_f)
#
# garch_list <- lapply(R_list, function(R) garchFit(formula = ~ garch(1,1),
#                                                   data = R,trace = F))
# coef_hat <- sapply(garch_list, function(g) g@fit$matcoef[,1])
# colnames(coef_hat) <- paste("n",n_seq,sep = "_")
# data.frame(coef_hat)
#
# garch_list
#
# library(tsDyn)
#
# ##Simulation of a TAR with 1 threshold
# TvarMat <- c(2.9,-0.4,-0.1,-1.5, 0.2,0.3)
# sim <- setar.sim( B=TvarMat,lag=2, type="simul",
#                   nthresh=1, Thresh=2,
#                   starting=c(2.8,2.2))$serie
# mean(ifelse(sim>2,1,0)) #approximation of values over the threshold
# #check the result
# selectSETAR(sim, m=2)
#
# TAR ---------------------------------------------------------------------
data(m.unrate)
ser_tar = diff(m.unrate)
train = ser_tar[-length(ser_tar)]
test = ser_tar[length(ser_tar)]
(model = auto.arima(train))
data(m.unrate)
ser_tar = diff(m.unrate)
train = ser_tar[-length(ser_tar)]
test = ser_tar[length(ser_tar)]
(model = auto.arima(train))
bagging = function(series){
model = auto.arima( series )
y = forecast(model, h = 1)$mean
return(y)
}
bag <- tsboot(train, bagging,R = n,l = block_length, sim = "fixed")
rm(list = ls())
library(boot)
library(tsDyn)
#
# sim_garch_f <- function(n) {
#   set.seed(seed)
#   sigma_t <- sqrt(w/(1-a-b))
#   ht_seq <- numeric()
#   R_seq <- numeric()
#   for(i in 1:n) {
#     R_t1 <- rnorm(1,con,sigma_t)
#     R_seq <- c(R_seq,R_t1)
#     ht1 <- w + a*(R_t1^2) + b*sigma_t^2
#     ht_seq <- c(ht_seq,ht1)
#     sigma_t <- sqrt(ht1)
#   }
#
#   return(R_seq)
# }
#
# n_seq <- 10^(2:4)
# R_list <- lapply(n_seq, sim_garch_f)
#
# garch_list <- lapply(R_list, function(R) garchFit(formula = ~ garch(1,1),
#                                                   data = R,trace = F))
# coef_hat <- sapply(garch_list, function(g) g@fit$matcoef[,1])
# colnames(coef_hat) <- paste("n",n_seq,sep = "_")
# data.frame(coef_hat)
#
# garch_list
#
# library(tsDyn)
#
# ##Simulation of a TAR with 1 threshold
# TvarMat <- c(2.9,-0.4,-0.1,-1.5, 0.2,0.3)
# sim <- setar.sim( B=TvarMat,lag=2, type="simul",
#                   nthresh=1, Thresh=2,
#                   starting=c(2.8,2.2))$serie
# mean(ifelse(sim>2,1,0)) #approximation of values over the threshold
# #check the result
# selectSETAR(sim, m=2)
#
# TAR ---------------------------------------------------------------------
data(m.unrate)
ser_tar = diff(m.unrate)
train = ser_tar[-length(ser_tar)]
test = ser_tar[length(ser_tar)]
# model = setar(ser_tar, ML=c(2,3,4,12), MH=c(2,4,12), th=0.1, include="none")
# plot(ser_tar)
(model = auto.arima(train))
n = length(train)+ 1
nsim = 1000
y_bag = rep(NA, nsim)
block_length <- n/3
bagging = function(series){
model = auto.arima( series )
y = forecast(model, h = 1)$mean
return(y)
}
bag <- tsboot(train, bagging,R = n,l = block_length, sim = "fixed")
tsboot(train, bagging,R = n,l = block_length, sim = "fixed")
n
block_length <- n/3
block_length <- round(n/3)
bagging = function(series){
model = auto.arima( series )
y = forecast(model, h = 1)$mean
return(y)
}
tsboot(train, bagging,R = n,l = block_length, sim = "fixed")
n
tsboot(train, bagging,R = 10,l = block_length, sim = "fixed")
bagging = function(series){
model = auto.arima( series )
y = forecast(model, h = 1)$mean
return(y)
}
bagging(train)
tsboot(train, bagging, R = 10,l = block_length, sim = "fixed")
(model = auto.arima(train))
model
model = arima( series ,order = c(2,0,2))
bagging = function(series){
model = arima( series ,order = c(2,0,2))
y = forecast(model, h = 1)$mean
return(y)
}
tsboot(train, bagging, R = 10,l = block_length, sim = "fixed")
tsboot(train, bagging, R = 1000,l = block_length, sim = "fixed")
bagging = function(series){
model = arima( series ,order = c(2,0,2))
y = forecast(model, h = 1)$mean
return(y)
}
bagging(train)
bagging = function(series){
model = auto.arima( series ,order = c(2,0,2))
y = forecast(model, h = 1)$mean
return(y)
}
bagging = function(series){
model = auto.arima( series,max.order = 4)
y = forecast(model, h = 1)$mean
return(y)
}
tsboot(train, bagging, R = 1000,l = block_length, sim = "fixed")
